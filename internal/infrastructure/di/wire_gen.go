// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/3110Y/idsaver/internal/application/mapping"
	"github.com/3110Y/idsaver/internal/application/service"
	"github.com/3110Y/idsaver/internal/infrastructure/database"
	"github.com/3110Y/idsaver/internal/infrastructure/repository"
	"github.com/3110Y/idsaver/internal/infrastructure/router"
	"github.com/3110Y/idsaver/internal/presentation/http"
	"github.com/go-chi/chi/v5"
	"github.com/jmoiron/sqlx"
)

// Injectors from wire.go:

func InitializeDI() (*DI, error) {
	db, err := database.NewConnect()
	if err != nil {
		return nil, err
	}
	mux := router.NewRouter()
	idRepository := repository.NewIdRepository(db)
	idMapper := mapping.NewIdMapper()
	idService := service.NewIdService(idMapper, idRepository)
	idController := httpcontroller.NewIdController(idService)
	di := NewDI(db, mux, idRepository, idMapper, idService, idController)
	return di, nil
}

// wire.go:

type DI struct {
	DB           *sqlx.DB
	Router       *chi.Mux
	IdRepository *repository.IdRepository
	IdMapper     *mapping.IdMapper
	IdService    *service.IdService
	IdController *httpcontroller.IdController
}

func NewDI(
	DB *sqlx.DB,
	r *chi.Mux,
	IdRepository *repository.IdRepository,
	IdMapper *mapping.IdMapper,
	IdService *service.IdService,
	IdController *httpcontroller.IdController,
) *DI {
	return &DI{
		DB:           DB,
		Router:       r,
		IdRepository: IdRepository,
		IdMapper:     IdMapper,
		IdService:    IdService,
		IdController: IdController,
	}
}
